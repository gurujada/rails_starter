class <%= controller_class_name %>Controller < ApplicationController
  breadcrumb 'Home', :root_path
  include AppImport["<%= plural_table_name %>.add", "<%= plural_table_name %>.amend"]
  before_action :set_<%= singular_table_name %>, only: %i[ show edit update destroy ]

  def new
    breadcrumb "<%= plural_table_name.capitalize %>", :<%= plural_table_name %>_path
    breadcrumb "New <%= singular_table_name.titleize %>", "#"
    @<%= singular_table_name %> = <%= orm_class.build(class_name) %>
  end

  def index
    breadcrumb "<%= plural_table_name.capitalize %>", :<%= plural_table_name %>_path
    @search = <%= class_name %>.reverse_chronologically.ransack(params[:q])

    respond_to do |format|
      format.any(:html, :json) { @<%= plural_table_name %> = set_page_and_extract_portion_from @search.result }
      format.csv { render csv: @search.result }
      format.xlsx { render xlsx: @search.result }
    end
  end

  def show
    breadcrumb "<%= plural_table_name.capitalize %>", :<%= plural_table_name %>_path
    breadcrumb "<%= singular_table_name.titleize %>", "#"
    fresh_when etag: @<%= singular_table_name %>
  end

  def edit
    breadcrumb "<%= plural_table_name.capitalize %>", :<%= plural_table_name %>_path
    breadcrumb "<%= singular_table_name.titleize %>", "#"
  end

  def create
    result = add.(<%= singular_table_name %>_params)
    Dry::Matcher::ResultMatcher.(result) do |m|
      m.success do |v|
        @<%= singular_table_name %> = v
        redirect_to <%= redirect_resource_name %>, notice: <%= "'#{human_name} was successfully created.'" %>
      end
      m.failure do |v|
        @<%= singular_table_name %> = v
        render action: :new
      end
    end
  end

  def update
    result = amend.(<%= singular_table_name %>_params)
    Dry::Matcher::ResultMatcher.(result) do |m|
      m.success do |v|
        redirect_to <%= redirect_resource_name %>, notice: <%= "'#{human_name} was successfully updated.'" %>
      end
      m.failure do |v|
        @account = v
        render action: :new
      end
    end
  end

  def destroy
    @<%= orm_instance.destroy %>
    respond_to do |format|
      format.any(:html, :js) { redirect_to <%= index_helper %>_url, notice: <%= "'#{human_name} was successfully destroyed.'" %> }
      format.json { head :no_content }
    end
  end

  private

  def set_<%= singular_table_name %>
    @<%= singular_table_name %> = <%= orm_class.find(class_name, "params[:id]") %>
  end

  def <%= "#{singular_table_name}_params" %>
    params.require(:<%= singular_table_name %>).permit(<%= attributes_names.map { |name| ":#{name}" }.join(', ') %>)
  end
end
